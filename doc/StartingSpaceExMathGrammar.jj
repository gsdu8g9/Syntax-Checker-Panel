/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

options {
  LOOKAHEAD = 5;
  FORCE_LA_CHECK = true;
  STATIC = false;  // if true Second call to constructor of static parser. 
       // You must either use ReInit() or set the JavaCC option STATIC to false
//   DEBUG_PARSER = true;
//  DEBUG_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
   
}

/*
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}
*/


PARSER_BEGIN(SpaceExMath)
import java.util.ArrayList;
import java.io.Reader;
import java.io.StringReader;

public class SpaceExMath
{

  double previousValue = 0.0;

  ArrayList<String > symbols = new ArrayList<String >();
  public static void main(String args []) throws ParseException, TokenMgrError, NumberFormatException
  {
 ArrayList<String> lst = new ArrayList<String>()
 {
   {
    // add("_flow ::= v & X' == 12  & x := 2 * x + 3"); // KO
    // TokenMgrError: Lexical error at line 1, column 8.  Encountered: ":" (58), after : ":"
    
    // add("_flow := v \n& X' == 12"); // OK

   // add("_flow :=  &"); // KO
    //    ParseException: Encountered "" at line 1, column 11.
    // Was expecting one of:
    

    // add("12 := v& X == 12  & "); // KO
    // ParseException: Encountered " <INTEGER> "12 "" at line 1, column 1.
    // Was expecting:<ID> ...
    
   // add(" & X == 12"); // KO
    // ParseException: Encountered " "&" "& "" at line 1, column 2.
    // Was expecting:<ID> ...

    // add(" X == 12 &"); //  KO     
    // ParseException: Encountered " "&" "& "" at line 1, column 2.
    // Was expecting:<ID> ...

   // add(" X == 12 &\nx':=3.4"); // OK     

   // add(" X == 12 &\nx':=3.4& & &"); // KO     
   // ParseException: Encountered "" at line 2, column 10.
   // Was expecting one of:


   // add(" X == 12 / 2"); // OK  


  add(" X == 12 ^ (10 * x + y)"); // ok     
  

  add("X := 12 ^ (10 * x + y) + cos((x+5)^2+y*5)"); // ok     

  add("X := cos(x)"); // ok     

  add("sin := cos(x)"); // KO
  // ParseException: Encountered " "sin" "sin "" at line 1, column 1.
  // Was expecting:  <ID>  
   
   }
 };
     
    System.out.println(">>> start SpaceExMath");
    
 //   SpaceExMath parser = new Calculator(System.in);
  //  parser.Start(System.out);
    
    SpaceExMath parser;
    if (args.length == 0) {
      System.out.println("SpaceExMath Parser Version 0.1:  Reading from standard input . . .");

   int cmpt = 0;
for( String st : lst ) {
  Reader reader = new StringReader(st);
  parser = new SpaceExMath(reader);
  cmpt++;
    try {
      System.out.println("--------------------------------------\n" + cmpt + ". parse :\n<---\n" + st + "\n--->\n");

      parser.flow();

      System.out.println("SpaceExMath Parser Version 0.1:  DF definitions parsed successfully.");
    } catch (ParseException e) {
      System.out.println("SpaceExMath Parser Version 0.1:  Encountered errors during parse.");
      System.out.println("ParseException: " + e.getMessage());
      System.out.println("in :----\n" + st + "\n---");
    }
 catch (TokenMgrError e) {
      System.out.println("SpaceExMath Parser Version 0.1:  Encountered Token errors during parse.");
      System.out.println("TokenMgrError: " + e.getMessage());
      System.out.println("in :----\n" + st + "\n---");
    }
    
  }
      return;
    
   
    } else if (args.length == 1) {
      System.out.println("SpaceExMath Parser Version 0.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new SpaceExMath(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("SpaceExMath Parser Version 0.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("SpaceExMath Parser Version 0.1:  Usage is one of:");
      System.out.println("         java $$$$ < inputfile");
      System.out.println("OR");
      System.out.println("         java $$$$ inputfile");
      return;
    }
    try {
      parser.flow();
      System.out.println("SpaceExMath Parser Version 0.1:  DF definitions parsed successfully.");
    } catch (ParseException e) {
      System.out.println("SpaceExMath Parser Version 0.1:  Encountered errors during parse.");
      System.out.println("ParseException: " + e.getMessage());
    }
    
  }
  
}

PARSER_END(SpaceExMath)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP : { < " " > }
SKIP : { < "\t" > }
SKIP : { < "\n" > }
SKIP : { < "\r" > }
SKIP : { < "//" (~["\n"])* "\n" > }

/*
{
  < " " >
| < "\t" >
| < "\n" >
| < "//" (~["\n"])* "\n" >
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "#" ([" ","\t"])* (["0"-"9"])+
    (([" ","\t"])* "\"" (~["\""])+ "\""
           ([" ","\t"])* (["0"-"9"])* ([" ","\t"])* (["0"-"9"])*)? "\n" >
}
*/



/* Definitions of complex regular expressions follow */

/* different kind of token in spaceEx:

	KEYWORD :  fonction cos, sin 
	IDENTIFIER : identifiers, variable names
	OPERATOR : + - = := 
	NUMBER : numbers in various formats
*/


TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }

TOKEN : { < TRUE : "true" > }
TOKEN : { < FALSE : "false" > }


/* TOKEN : { < UPPERCASE :	["A"-"Z"] > } */
/* TOKEN : { < LOWERCASE :	["a"-"z"] > } */

/* TOKEN : { < FONCTION2 : (["a"-"z"])(["a"-"z"])* > } */

TOKEN : { < SIN : "sin" > }
TOKEN : { < COS : "cos" > } 
TOKEN : { < TAN : "tan" > } 
TOKEN : { < ASIN : "asin" > } 
TOKEN : { < ACOS : "acos" > } 
TOKEN : { < ATAN : "atan" > } 
TOKEN : { < EXPO : "exp" > } 
TOKEN : { < LOG : "log" > } 
TOKEN : { < LOG10 : "log10" > } 
TOKEN : { < POW : "pow" > } // pow(x,y) 
TOKEN : { < SQRT : "sqrt" > } 
TOKEN : { < FABS : "fabs" > } 
TOKEN : { < FLOOR : "floor" > } 
TOKEN : { < CEIL : "ceil" > } 

/* TOKEN : { < PI : "PI" > }      ??????????????? */


TOKEN : { < ID: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","_"])* > }

/* TOKEN : { < FONCTION: (["a"-"z"])(["a"-"z"])*(" ")*"(" > } */

TOKEN : { < INTEGER : (< DIGIT >)+ >}
TOKEN : { < DIGIT : ["0"-"9"] > }
TOKEN : { < FLOAT :  (< DIGIT >)+ "." (< DIGIT >)+ | (< DIGIT >)+ "." | "." (< DIGIT >)+  >}


// TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < EXP : "^" > }
TOKEN : { < PRIME : "'" > }
TOKEN : { < AFFECTATION : ":=" > }
TOKEN : { < EQUAL : "=" > }
TOKEN : { < AND : "&" > }



/*
TOKEN : { < NUMBER : < INTEGER > | < FLOAT > > }
TOKEN : { < INTEGER : < DIGITS > >}
TOKEN : { < FLOAT : < DIGITS > | < DIGITS > "." < DIGITS > | < DIGITS > "." | "." < DIGITS >  >}
// purely local named regular expressions are marked by a # in their definition 
TOKEN : { < #DIGITS : (< DIGIT >)+ > }
TOKEN : { < #DIGIT : [ "0"-"9" ] > }
*/

/*
 assigment   <UniqueVariable> := ...   (:= -- > without prime)  | or with primes but express as propositions (==, <, <= > >=)
 examples :
cinetic energy conservation:
  (1/2) * m1 * v1^2 + (1/2) * m2 * v2^2 ==  (1/2) * m1 * v1'^2 + (1/2) * m2 * (v2')^2 
impulse conservation:
   m1 * v1 + m2 * v2 = m1 * v1' + m2 * v2'


flow
    expr() (== <  <= > >= ) expr  ( prime to note derivative)

guard  invariant
  (no PRIME)   expr() (== <  <= > >= ) expr  [(== <  <= > >= ) expr ]

*/

void flow() : {} { assign() (< AND > assign ())* <EOF> }
void assign() : {} { <ID> [<PRIME>] ( <AFFECTATION> | <EQUAL> <EQUAL>) expr() }
void expr() : {} { term() ((< PLUS > | < MINUS >) term())* }
void term() : {} { factor() ((<TIMES>|<DIVIDE>|<EXP>) factor())* }
void factor() : {} { <INTEGER> | <FLOAT> | fonction() <LPAR> expr() <RPAR>
					| <ID> | <LPAR> expr() <RPAR> | <MINUS> factor() }
void fonction() : {} {  <SIN> | <COS> | <TAN> | <ASIN> | < ACOS> | <ATAN > | <EXPO >
| <LOG> | <LOG10> | <POW> | <SQRT> | <FABS> | <FLOOR> | <CEIL> } 
