/* Generated By:JavaCC: Do not edit this line. SyntaxConstants.java */
package spaceExGrammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAR = 6;
  /** RegularExpression Id. */
  int RPAR = 7;
  /** RegularExpression Id. */
  int TRUE = 8;
  /** RegularExpression Id. */
  int FALSE = 9;
  /** RegularExpression Id. */
  int SIN = 10;
  /** RegularExpression Id. */
  int COS = 11;
  /** RegularExpression Id. */
  int TAN = 12;
  /** RegularExpression Id. */
  int ASIN = 13;
  /** RegularExpression Id. */
  int ACOS = 14;
  /** RegularExpression Id. */
  int ATAN = 15;
  /** RegularExpression Id. */
  int EXPO = 16;
  /** RegularExpression Id. */
  int LOG = 17;
  /** RegularExpression Id. */
  int LOG10 = 18;
  /** RegularExpression Id. */
  int POW = 19;
  /** RegularExpression Id. */
  int SQRT = 20;
  /** RegularExpression Id. */
  int FABS = 21;
  /** RegularExpression Id. */
  int FLOOR = 22;
  /** RegularExpression Id. */
  int CEIL = 23;
  /** RegularExpression Id. */
  int ID = 24;
  /** RegularExpression Id. */
  int CONSTANT = 25;
  /** RegularExpression Id. */
  int INTEGER = 26;
  /** RegularExpression Id. */
  int DIGIT = 27;
  /** RegularExpression Id. */
  int FLOAT = 28;
  /** RegularExpression Id. */
  int EXPONENT = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int TIMES = 32;
  /** RegularExpression Id. */
  int DIVIDE = 33;
  /** RegularExpression Id. */
  int EXP = 34;
  /** RegularExpression Id. */
  int PRIME = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int EQUALEQUAL = 37;
  /** RegularExpression Id. */
  int LESSER = 38;
  /** RegularExpression Id. */
  int GREATER = 39;
  /** RegularExpression Id. */
  int ASSIGNMENT = 40;
  /** RegularExpression Id. */
  int AND = 41;
  /** RegularExpression Id. */
  int OR = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"(\"",
    "\")\"",
    "\"true\"",
    "\"false\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"exp\"",
    "\"log\"",
    "\"log10\"",
    "\"pow\"",
    "\"sqrt\"",
    "\"fabs\"",
    "\"floor\"",
    "\"ceil\"",
    "<ID>",
    "<CONSTANT>",
    "<INTEGER>",
    "<DIGIT>",
    "<FLOAT>",
    "<EXPONENT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"\\\'\"",
    "\",\"",
    "\"==\"",
    "<LESSER>",
    "<GREATER>",
    "\":=\"",
    "\"&\"",
    "\"|\"",
  };

}
