options {
	LOOKAHEAD = 5;
	FORCE_LA_CHECK = true;
	STATIC = false;  
	SANITY_CHECK = true;
}
PARSER_BEGIN(Syntax)

package spaceExGrammar;

public class Syntax
{
  	
  	
	public static void main(String args[]) throws Exception
	{
	}
}


PARSER_END(Syntax)

//tokens have been written in groups, so that the colouring based on tokens
//is easily done and does not depend on the actual values of the token kind.
//So to add new Tokens, add them accordingly. If the token is similar to some
//earlier existing tokens, and you want them to be coloured similarly, place
//them somewhere in the middle of the group.
//If it is a new kind of token, dont place them inside any group.

SKIP : { < " " > }
SKIP : { < "\t" > }
SKIP : { < "\n" > }
SKIP : { < "\r" > }
SKIP : { < "//" (~["\n"])* "\n" > }

TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }


TOKEN : { < TRUE : "true" > }
TOKEN : { < FALSE : "false" > }

//put new function tokens in between token sin and ceil

TOKEN : { < SIN : "sin" > }
//enter any new function tokens below this
TOKEN : { < COS : "cos" > } 
TOKEN : { < TAN : "tan" > } 
TOKEN : { < ASIN : "asin" > } 
TOKEN : { < ACOS : "acos" > } 
TOKEN : { < ATAN : "atan" > } 
TOKEN : { < EXPO : "exp" > } 
TOKEN : { < LOG : "log" > } 
TOKEN : { < LOG10 : "log10" > } 
TOKEN : { < POW : "pow" > } // pow(x,y) 
TOKEN : { < SQRT : "sqrt" > } 
TOKEN : { < FABS : "fabs" > } 
TOKEN : { < FLOOR : "floor" > }
//enter new function tokens above this 
TOKEN : { < CEIL : "ceil" > }


TOKEN : { < ID: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","_"])* > }



TOKEN : { < CONSTANT : < INTEGER> | < FLOAT> | < FLOAT> < EXPONENT> > }
TOKEN : { < INTEGER : (< DIGIT >)+ >}
TOKEN : { < DIGIT : ["0"-"9"] > }
TOKEN : { < FLOAT :  (< DIGIT >)+ "." (< DIGIT >)+ | (< DIGIT >)+ "." | "." (< DIGIT >)+  >}
TOKEN : { < EXPONENT : ("e" | "E") ("" | < PLUS> |< MINUS>) (< INTEGER> | < FLOAT>) > }


//add any new operator symbols token in between plus and comma
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < EXP : "^" > }
TOKEN : { < PRIME : "'" > }
TOKEN : { < COMMA : "," > }
//add new comparison and similar symbols in between equalequal and assignment
TOKEN : { < EQUALEQUAL : "==">}
TOKEN : {< LESSER : "<" | "<=">}
TOKEN : {< GREATER : ">" | ">=">}
TOKEN : { < ASSIGNMENT : ":=" > }


TOKEN : { < AND : "&" > }
TOKEN :{ < OR : "|" > }


//Grammer Description //

void expr() : {} { term() ((< PLUS > | < MINUS >) term())* }
void term() : {} { factor() ((<TIMES>|<DIVIDE>|<EXP>) factor())* }
void factor() : {} { element() | function() <LPAR> expr() <RPAR>
					| param() | <LPAR> expr() <RPAR> | <MINUS> factor()
					| <POW> <LPAR > <EXP>  < COMMA> <EXP > <RPAR >}
void function() : {} {  <SIN> | <COS> | <TAN> | <ASIN> | < ACOS> | <ATAN > | <EXPO >
| <LOG> | <LOG10> | <SQRT> | <FABS> | <FLOOR> | <CEIL> }


void lassign() : {}{assign() ((< AND > | < OR>)assign ())* < EOF>}
void assign() : {} { (< ID> <ASSIGNMENT> expr() | expbool()) }
void syntax() : {} {expbool() < EOF>}
void expbool() : {} {bool() ((< OR> | < AND>) bool() )* }
void bool() : {}{< TRUE> |< FALSE> | cond() |< LPAR> expbool() < RPAR>}
void cond() : {} {expr() ((< GREATER> | < EQUALEQUAL>)(expr()) | (< LESSER> expr() [< LESSER> expr()]))}
void element() : {} {< CONSTANT> | < MINUS> < CONSTANT> | < PLUS> < CONSTANT>}
void param() : {} {< ID> [< PRIME>]}