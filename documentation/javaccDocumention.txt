JavaCC Documentation

To install Javacc in eclipse 
		
Help -> Install New Software -> Work with "http://eclipse-javacc.sourceforge.net/"
Select Javacc Eclipse plugin -> Next -> Finish


	
To start a new Javacc file
	
In any package, right click, New, Other, Javacc, Javacc Template file.


			
Working with javacc
	
Javacc is a library using which we can generate lexer and parser. It is required to specify to javacc the language (syntax) for which we	want the lexer and parser, and it will create Java files and classes for us to use. 


	
Specifying the grammar of the language

javacc accepts the grammar language in a fashion very much similar to BNF representation of grammar, first defining tokens and then the rules which are to be followed by the grammar. 

A javacc file can be broken into 4 major parts
		
First at the top, specifying the various option in the block OPTIONS{}. These various options are required while checking for the grammar, and play different role.
		
Next is the Part in PARSER_BEGIN(ClassName) to PARSER_END(ClassName) in which we specify a class with ClassName which is the main class to perform all the operaions, this class contains a main() method for everything, but the main over here should not be used, rather this file should be kept only for thr grammar description and the required tasks (from the grammar) can be done by creating other classes and importing the java files generated by javacc.
		
Next part is the token description. This part is where all the correct tokens of the grammar must be defined in the specified format and also the 	SKIP and SPECIAL TOKENS (details later). These tokens are importatnt for the lexer because the text passed to the parser is broken into these tokens.
		
Finally, last part is the grammar description which consists of the rules which the grammar must follow. These rules make use of the tokens defined above.
		
A good starting point for writing javacc code is available in the pdf 
		
http://www.google.fr/url?sa=t&rct=j&q=javacc%20examples&source=web&cd=2&ved=0CGUQFjAB&url=http%3A%2F%2Fwww.engr.mun.ca%2F~theo%2FJavaCC-Tutorial%2Fjavacc-tutorial.pdf&ei=3F3fT83fAuam0QWZmOnnCg&usg=AFQjCNFfv7oHUkMD7WW-XuKO7LB89DrSZg&cad=rja  			
	
The details of TOKEN SKIP and SPECIAL_TOKEN LOOKAHEAD (a useful option) and some other useful options can be found at 
http://javacc.java.net/doc/javaccgrm.html
	

	
Files generated by Javacc and using them as lexer and parser

Now, javacc generates 7 files, some of which are common to any grammar generated and some are specific to the grammar defined. Two files in p  particular, ParseException.java and TokenMgrError.java are general files using which javacc creates ParseExceptions or Token errors. Parse Exceptions 	are generated if all the tokens in the input are correct but the input does not follow the grammar rule. Token Errors on the other hancd are generated when the input contains a token which is neither skipped, not a valid token (or valid special token). 
	
Next the file <ClassName>Constants.java is an interface which keeps a list of all the tokens defined and associates with each of these tokens an int 	value which can be used to uniquely identify a token from its kind field (in Token.java class, later).
	
Next are the files SimpleCharacterStream.java and <ClassName>TokenManager.java, which can be used togerher to make use of the lexer. <ClassName>TokenManager.java provides methods like getNextToken() to get tokens one by one from any input statement. But this class constructor requires a SimpleCharStream object as an argument, so to pass any string to be lexed, we need to first make a new SimpleCharStream() object by 	providing it an reader argument, and then passing this SimpleCharStream object to <ClassName>TokenManager constructor. Then we can loop through all the tokens in the original string. On looping, each time we get an object of Token class, which has several associated fields which can be used. Some of the important ones are kind (to identify the type of token) and image (to get the string image of the token). There are various others as well like beginColumn, beginLine ehich can be used. A detailed description of all the tokens and their use is present in the Token.java file itself, in the form of comments before each of the field and method. 
	
	Eg:
	<ClassName>TokenManager tm = new <ClassName>TokenManager(new SimpleCharStream(new StringReader(String)))
	
	
Finally the file <ClassName>.java is the main parser file. It basically contains all the grammar defined in the form of java methods and also the 	part of the Grammar file (.jj file) which was specified in between PARSER_BEGIN and PARSER_END. To make use of the parser from some other package or	file, an object of this class must be made, and then the required method (grammar description rule) must be called on that object. While creating the  object for this class, the constructor expects a reader argument and the string to pe checked must be passed by first making it to a reader. 
	
	Eg:
	<ClassName> object = new <ClassName>(new StringReader(String))
	object.syntax();
	
If the provided string is a valid string according to the grammar, the function return without any errors, on the other hand, if the String has some invalid tokens, a new TokenMgrError is thrown, and if the String has all the valid tokens but does not follow the grammar rules, a new ParseException 	is thrown. So the statement parser.syntax() must be in a try block and catch must be for Exception and error, and the appropriate actions must be taken.
	
	
	
	
For further detailing, there is a good FAQ about Javacc present at http://www.idevelopment.info/data/Programming/java/JavaCC/The_JavaCC_FAQ.htm
	
And the official javacc documentation is available at http://javacc.java.net/doc/docindex.html	
