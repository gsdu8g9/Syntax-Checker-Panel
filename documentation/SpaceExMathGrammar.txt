BNF Grammer representation 


<function> := "sin" | "cos" | "tan" | "asin" | "acos" | "atan" | "exp" | "log" | "log10" | "sqrt" | "fabs" | "floor" | "ceil"

<id> := (["a"-"z", "A"-"Z", "_"])(["a"-"z", "A"-"Z", "_", "0"-"9"])*

<digit>  := ["0"-"9"]

<integer> := (<digit>)+

<float> :=  (<digit>)+ "." | "." (<digit>)+ | (<digit>)+ "." (<digit>)+ 

<exp>   :=  ("e" | "E") ("" | "+" | "-") (<integer> | <float>)

<constant> := <integer> | <float> | <float> <exp>

<element> :=  <constant> | "-" <constant> | "+" <constant>

<expr> := <term> (("+" | "-") <term>)*

<term> :=  <factor> (("*" | "/" | "^") <factor>)*

<factor> := <element> | <param> | "(" <expr> ")" | "-" <factor> | <function> "(" <expr> ")" | "pow" "(" <expr>  "," <expr>  ")"

<param> := <id> ("'")?

<greater> := ">" | ">="

<lesser> := "<" | "<="

<equalequal> := "=="

<assignment> := ":="



ASSIGNMENT

<lAssign> := <assign> (("&" | "|" ) <assign>)* "EOF"

<assign> := <id> <assignment> <expr> | <expbool>



FLOW and INVARIANT and GUARD

<syntax> := <expbool> "EOF"

<expbool> := <bool> (("&" | "|") <bool>)*

<bool> := "true" | "false" | "(" <expbool> ")" | <cond>

<cond> := <expr> ( ((<greater> | <equalequal>) <expr>) | ( <lesser> <expr> (<lesser> <expr>)?) )

